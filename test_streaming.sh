#!/bin/bash

# Script para testar funcionalidades de streaming do Express-PHP

echo "üöÄ Testando funcionalidades de streaming do Express-PHP"
echo "=================================================="

# Verificar se o PHP est√° instalado
if ! command -v php &> /dev/null; then
    echo "‚ùå PHP n√£o encontrado. Por favor, instale o PHP."
    exit 1
fi

# Ir para o diret√≥rio do projeto
cd "$(dirname "$0")/.."

echo "üìÅ Diret√≥rio do projeto: $(pwd)"

# Verificar se o autoload existe
if [ ! -f "vendor/autoload.php" ]; then
    echo "‚ùå Autoload n√£o encontrado. Execute 'composer install' primeiro."
    exit 1
fi

echo ""
echo "üîß Iniciando servidor PHP em modo background..."

# Iniciar o servidor PHP com o exemplo de streaming
php -S localhost:8000 examples/example_streaming.php &
SERVER_PID=$!

# Aguardar o servidor inicializar
sleep 2

# Fun√ß√£o para limpar ao sair
cleanup() {
    echo ""
    echo "üõë Parando servidor..."
    kill $SERVER_PID 2>/dev/null
    exit 0
}

# Configurar trap para cleanup
trap cleanup EXIT INT TERM

echo "‚úÖ Servidor iniciado com PID: $SERVER_PID"
echo ""
echo "üåê Servidor rodando em: http://localhost:8000"
echo ""
echo "üìä Testando endpoints de streaming..."
echo ""

# Fun√ß√£o para testar endpoint
test_endpoint() {
    local url="$1"
    local description="$2"
    local timeout="${3:-10}"

    echo "üîç Testando: $description"
    echo "   URL: $url"

    # Testar se o endpoint responde
    if curl -s --max-time $timeout "$url" > /dev/null; then
        echo "   ‚úÖ Endpoint funcionando"
    else
        echo "   ‚ùå Endpoint com problemas"
    fi
    echo ""
}

# Testar endpoints b√°sicos
test_endpoint "http://localhost:8000/" "P√°gina principal" 5
test_endpoint "http://localhost:8000/stream/text" "Streaming de texto" 15
test_endpoint "http://localhost:8000/stream/json" "Streaming de JSON" 10
test_endpoint "http://localhost:8000/stream/custom-buffer" "Streaming com buffer customizado" 15

echo "üìã Testando streaming com curl..."
echo ""

# Teste detalhado do streaming de texto
echo "üî§ Teste de streaming de texto (primeiros 5 chunks):"
echo "   Comando: curl -N http://localhost:8000/stream/text | head -5"
curl -N http://localhost:8000/stream/text 2>/dev/null | head -5
echo ""

# Teste do streaming de JSON
echo "üìÑ Teste de streaming JSON (in√≠cio do stream):"
echo "   Comando: curl -N http://localhost:8000/stream/json | head -3"
curl -N http://localhost:8000/stream/json 2>/dev/null | head -3
echo ""

# Teste Server-Sent Events
echo "üì° Teste de Server-Sent Events (primeiros 10 eventos):"
echo "   Comando: curl -N http://localhost:8000/stream/events | head -10"
curl -N http://localhost:8000/stream/events 2>/dev/null | head -10
echo ""

# Verificar se arquivo de exemplo existe para download
echo "üìÅ Testando streaming de arquivo..."
if curl -s --head "http://localhost:8000/stream/file" | grep -q "200 OK"; then
    echo "   ‚úÖ Endpoint de arquivo funcionando"
    echo "   üìä Tamanho do arquivo:"
    curl -s --head "http://localhost:8000/stream/file" | grep -i content-length
else
    echo "   ‚ö†Ô∏è  Arquivo de exemplo pode n√£o existir ainda"
fi
echo ""

echo "üß™ Executando testes unit√°rios para streaming..."
echo ""

# Executar testes espec√≠ficos de streaming se existirem
if [ -f "tests/Services/ResponseStreamingTest.php" ]; then
    echo "‚ñ∂Ô∏è  Executando ResponseStreamingTest..."
    ./vendor/bin/phpunit tests/Services/ResponseStreamingTest.php --colors=always
    echo ""
else
    echo "‚ö†Ô∏è  Testes de streaming n√£o encontrados"
fi

echo "üìà Testando performance b√°sica..."
echo ""

# Teste simples de performance
echo "‚è±Ô∏è  Medindo tempo de resposta do streaming:"
time curl -s http://localhost:8000/stream/text > /dev/null
echo ""

echo "üîß Informa√ß√µes do ambiente:"
echo "   PHP Version: $(php -v | head -1)"
echo "   Memory Limit: $(php -r 'echo ini_get("memory_limit");')"
echo "   Max Execution Time: $(php -r 'echo ini_get("max_execution_time");')"
echo "   Output Buffering: $(php -r 'echo ini_get("output_buffering");')"
echo ""

echo "üì± Para testar manualmente:"
echo "   ‚Ä¢ Abra http://localhost:8000 no navegador"
echo "   ‚Ä¢ Clique nos links para testar diferentes tipos de streaming"
echo "   ‚Ä¢ Use http://localhost:8000/stream/test-sse para testar Server-Sent Events"
echo ""

echo "üîç Para monitorar logs em tempo real (em outro terminal):"
echo "   tail -f /var/log/apache2/error.log  # ou o arquivo de log do seu servidor"
echo ""

echo "üí° Exemplos de uso com curl:"
echo "   # Streaming de texto:"
echo "   curl -N http://localhost:8000/stream/text"
echo ""
echo "   # Server-Sent Events:"
echo "   curl -N -H 'Accept: text/event-stream' http://localhost:8000/stream/events"
echo ""
echo "   # Download de arquivo:"
echo "   curl -O http://localhost:8000/stream/file"
echo ""

echo "‚ú® Teste conclu√≠do! Servidor continua rodando..."
echo "   Pressione Ctrl+C para parar o servidor"
echo ""

# Manter o script rodando at√© o usu√°rio parar
wait
