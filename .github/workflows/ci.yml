name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: ['8.1', '8.2', '8.3', '8.4']

    name: PHP ${{ matrix.php-version }} Tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, session
        coverage: xdebug

    - name: Validate composer.json and composer.lock
      run: composer validate --strict || { echo 'Composer validation failed'; exit 1; }

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress || { echo 'Composer install failed'; exit 1; }

    - name: Check PHP syntax
      run: find src -name "*.php" -exec php -l {} \; || { echo 'PHP syntax check failed'; exit 1; }

    - name: Run PHPStan
      run: |
        if [ -f "vendor/bin/phpstan" ]; then
          ./vendor/bin/phpstan analyse --no-progress || { echo 'PHPStan analysis failed'; exit 1; }
        else
          echo "PHPStan not installed, skipping static analysis"
        fi

    - name: Run PHP CS
      run: |
        if [ -f "vendor/bin/phpcs" ]; then
          ./vendor/bin/phpcs --standard=PSR12 src/ || { echo 'PHPCS check failed'; exit 1; }
        else
          echo "PHPCS not installed, skipping code style check"
        fi

    - name: Run PHPUnit tests
      run: |
        if [ -f "vendor/bin/phpunit" ]; then
          echo "Running PHPUnit tests on PHP ${{ matrix.php-version }}..."
          # For PHP 8.1, try with coverage, for others just run tests
          if [ "${{ matrix.php-version }}" = "8.1" ]; then
            ./vendor/bin/phpunit --coverage-text --coverage-clover coverage.xml || {
              echo "Coverage failed, running without coverage..."
              ./vendor/bin/phpunit --testdox || {
                echo '‚ùå PHPUnit tests failed'
                echo 'üîç Running with detailed error output...'
                ./vendor/bin/phpunit --debug || exit 1
              }
            }
          else
            # Para todas as vers√µes PHP 8.0+, usar configura√ß√£o padr√£o
            ./vendor/bin/phpunit --testdox --fail-on-warning --fail-on-incomplete --fail-on-skipped || {
              echo '‚ùå PHPUnit tests failed'
              echo 'üîç Running with detailed error output...'
              ./vendor/bin/phpunit --debug --fail-on-warning --fail-on-incomplete --fail-on-skipped || exit 1
            }
          fi
        else
          echo "PHPUnit not installed, running basic tests"
          php test/auth_test.php
        fi

    - name: Run custom validation
      run: php scripts/validate_project.php || { echo 'Custom validation failed'; exit 1; }

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.php-version == '8.1'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  quality:
    runs-on: ubuntu-latest
    name: Code Quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, dom, filter, gd, json, session

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Security Check
      run: |
        if [ -f "vendor/bin/security-checker" ]; then
          ./vendor/bin/security-checker security:check composer.lock
        else
          echo "Security checker not installed"
        fi

    - name: Dependency Check
      run: composer outdated --direct

  documentation:
    runs-on: ubuntu-latest
    name: Documentation Validation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate Documentation Structure
      run: |
        echo "üîç Validating documentation structure..."

        # Check if main documentation files exist
        required_files=(
          "docs/DOCUMENTATION_INDEX.md"
          "docs/README.md"
          "docs/guides/QUICK_START_GUIDE.md"
          "docs/guides/CUSTOM_MIDDLEWARE_GUIDE.md"
          "docs/guides/STANDARD_MIDDLEWARES.md"
          "docs/guides/SECURITY_IMPLEMENTATION.md"
          "benchmarks/README.md"
          "benchmarks/reports/COMPREHENSIVE_PERFORMANCE_SUMMARY.md"
        )

        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Required documentation file missing: $file"
            exit 1
          else
            echo "‚úÖ Found: $file"
          fi
        done

        echo "üéâ All required documentation files present!"

    - name: Check Documentation Links
      run: |
        echo "üîó Checking documentation links..."

        # Check for broken internal links in markdown files
        find docs/ -name "*.md" -exec grep -l "\[.*\](.*\.md)" {} \; | while read file; do
          echo "Checking links in: $file"

          # Extract markdown links and check if target files exist
          grep -o '\[.*\](.*\.md)' "$file" | sed 's/.*](\(.*\))/\1/' | while read link; do
            # Convert relative path to absolute if needed
            if [[ "$link" == ../* ]]; then
              target_file="$link"
            else
              target_file="docs/$link"
            fi

            if [ ! -f "$target_file" ]; then
              echo "‚ö†Ô∏è  Potentially broken link in $file: $link"
            fi
          done
        done

    - name: Performance Report Validation
      run: |
        echo "üìä Validating performance reports..."

        # Check if performance summary has recent data
        if [ -f "benchmarks/reports/COMPREHENSIVE_PERFORMANCE_SUMMARY.md" ]; then
          if grep -q "2025-06-27" "benchmarks/reports/COMPREHENSIVE_PERFORMANCE_SUMMARY.md"; then
            echo "‚úÖ Performance report contains recent data"
          else
            echo "‚ö†Ô∏è  Performance report may be outdated"
          fi
        fi

        # Check if benchmark results exist
        if [ -d "benchmarks/reports/" ]; then
          report_count=$(find benchmarks/reports/ -name "*.json" | wc -l)
          echo "üìà Found $report_count benchmark result files"
        fi

    - name: Validate OpenAPI Features
      run: |
        echo "üìö Validating OpenAPI/Swagger features..."

        # Run the OpenAPI validation script
        if [ -f "scripts/validate_openapi.sh" ]; then
          chmod +x scripts/validate_openapi.sh
          ./scripts/validate_openapi.sh
        else
          echo "‚ö†Ô∏è  OpenAPI validation script not found"
        fi
