#!/bin/bash

# Express PHP - Pre-commit Hook
# Executa valida√ß√µes de qualidade de c√≥digo antes do commit

set -e

echo "üîç Executando valida√ß√µes pre-commit..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir mensagens coloridas
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö†]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

# Verifica se as depend√™ncias est√£o instaladas
if [ ! -d "vendor" ]; then
    print_error "Depend√™ncias n√£o encontradas. Execute 'composer install' primeiro."
    exit 1
fi

# Array para rastrear falhas
FAILURES=()

# 1. PHPStan - An√°lise est√°tica
print_status "Executando PHPStan (an√°lise est√°tica)..."
if ! composer phpstan > /dev/null 2>&1; then
    print_error "PHPStan falhou!"
    FAILURES+=("phpstan")
    composer phpstan
else
    print_success "PHPStan passou!"
fi

# 2. PHPUnit - Testes unit√°rios
print_status "Executando PHPUnit (testes unit√°rios)..."
if ! composer test > /dev/null 2>&1; then
    print_error "Testes unit√°rios falharam!"
    FAILURES+=("phpunit")
    composer test
else
    print_success "Testes unit√°rios passaram!"
fi

# 3. PHP Code Sniffer - PSR-12
print_status "Verificando padr√£o PSR-12..."
if ! composer cs:check > /dev/null 2>&1; then
    print_warning "C√≥digo n√£o est√° em conformidade com PSR-12"
    print_status "Tentando corrigir automaticamente..."

    if composer cs:fix > /dev/null 2>&1; then
        print_success "C√≥digo corrigido automaticamente!"
        print_warning "Arquivos foram modificados. Adicione-os ao commit e tente novamente."
        exit 1
    else
        print_error "N√£o foi poss√≠vel corrigir automaticamente o c√≥digo PSR-12"
        FAILURES+=("psr12")
        composer cs:check
    fi
else
    print_success "C√≥digo est√° em conformidade com PSR-12!"
fi

# 4. Verifica√ß√£o adicional de arquivos modificados
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(php)$' || true)

if [ -n "$STAGED_FILES" ]; then
    print_status "Verificando arquivos PHP modificados..."

    # Verifica sintaxe PHP
    for FILE in $STAGED_FILES; do
        if [ -f "$FILE" ]; then
            if ! php -l "$FILE" > /dev/null 2>&1; then
                print_error "Erro de sintaxe em: $FILE"
                FAILURES+=("syntax")
                php -l "$FILE"
            fi
        fi
    done

    if [[ ! " ${FAILURES[@]} " =~ " syntax " ]]; then
        print_success "Sintaxe PHP v√°lida!"
    fi
fi

# Verifica se houve falhas
if [ ${#FAILURES[@]} -eq 0 ]; then
    print_success "Todas as valida√ß√µes passaram! üéâ"
    echo ""
    echo "Commit autorizado ‚úÖ"
    exit 0
else
    print_error "As seguintes valida√ß√µes falharam:"
    for failure in "${FAILURES[@]}"; do
        echo "  - $failure"
    done
    echo ""
    print_error "Commit rejeitado ‚ùå"
    echo ""
    echo "Corrija os problemas acima e tente novamente."
    exit 1
fi
