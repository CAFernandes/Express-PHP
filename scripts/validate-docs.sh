#!/bin/bash

# Express PHP - Validador de Estrutura de Documenta√ß√£o
# Verifica se a documenta√ß√£o est√° organizada corretamente

set -e

echo "üìö Validando estrutura de documenta√ß√£o do Express PHP..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö†]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

# Fun√ß√£o para verificar se arquivo existe e tem conte√∫do
check_file() {
    local file="$1"
    local description="$2"

    if [ -f "$file" ]; then
        local size=$(wc -c < "$file" 2>/dev/null || echo "0")
        if [ "$size" -gt 100 ]; then
            print_success "$description existe e tem conte√∫do adequado"
            return 0
        else
            print_warning "$description existe mas tem pouco conte√∫do ($size bytes)"
            return 1
        fi
    else
        print_error "$description n√£o encontrado: $file"
        return 1
    fi
}

# Contadores
ERRORS=0
WARNINGS=0

print_status "Verificando documenta√ß√£o principal..."

# Documenta√ß√£o principal (raiz do projeto)
check_file "README.md" "README principal" || ((ERRORS++))
check_file "CHANGELOG.md" "Changelog" || ((WARNINGS++))
check_file "CONTRIBUTING.md" "Guia de contribui√ß√£o" || ((WARNINGS++))

print_status "Verificando estrutura da pasta docs/..."

# Documenta√ß√£o organizada
check_file "docs/DOCUMENTATION_INDEX.md" "√çndice de documenta√ß√£o" || ((ERRORS++))
check_file "docs/README.md" "README da documenta√ß√£o" || ((WARNINGS++))

print_status "Verificando guias de usu√°rio..."

# Guias
check_file "docs/guides/QUICK_START_GUIDE.md" "Guia de in√≠cio r√°pido" || ((ERRORS++))
check_file "docs/guides/CUSTOM_MIDDLEWARE_GUIDE.md" "Guia de middleware customizado" || ((WARNINGS++))
check_file "docs/guides/STANDARD_MIDDLEWARES.md" "Guia de middlewares padr√£o" || ((WARNINGS++))
check_file "docs/guides/SECURITY_IMPLEMENTATION.md" "Guia de implementa√ß√£o de seguran√ßa" || ((WARNINGS++))
check_file "docs/guides/PRECOMMIT_SETUP.md" "Guia de configura√ß√£o pre-commit" || ((WARNINGS++))

print_status "Verificando documenta√ß√£o de implementa√ß√£o..."

# Documenta√ß√£o de implementa√ß√£o
check_file "docs/implementation/PRECOMMIT_VALIDATION_COMPLETE.md" "Documenta√ß√£o de valida√ß√£o pre-commit" || ((WARNINGS++))
check_file "docs/implementation/COMPREHENSIVE_PERFORMANCE_SUMMARY_2025-06-27.md" "Relat√≥rio de performance" || ((WARNINGS++))

print_status "Verificando documenta√ß√£o de scripts..."

# Documenta√ß√£o de scripts
check_file "scripts/README.md" "Documenta√ß√£o dos scripts" || ((ERRORS++))

print_status "Verificando documenta√ß√£o de benchmarks..."

# Documenta√ß√£o de benchmarks
check_file "benchmarks/README.md" "Documenta√ß√£o dos benchmarks" || ((WARNINGS++))

print_status "Verificando documenta√ß√£o PT-BR..."

# Documenta√ß√£o em portugu√™s
check_file "docs/pt-br/README.md" "README em portugu√™s" || ((WARNINGS++))

echo ""
print_status "Verificando estrutura de diret√≥rios..."

# Verifica se as pastas existem
REQUIRED_DIRS=(
    "docs"
    "docs/guides"
    "docs/implementation"
    "docs/development"
    "docs/pt-br"
)

for dir in "${REQUIRED_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        print_success "Diret√≥rio $dir existe"
    else
        print_error "Diret√≥rio $dir n√£o encontrado"
        ((ERRORS++))
    fi
done

echo ""
print_status "Verificando links e refer√™ncias..."

# Verifica se os links no README principal funcionam
if [ -f "README.md" ]; then
    # Verifica se h√° refer√™ncias para docs/
    if grep -q "docs/" "README.md"; then
        print_success "README cont√©m refer√™ncias para documenta√ß√£o"
    else
        print_warning "README n√£o parece referenciar a documenta√ß√£o em docs/"
        ((WARNINGS++))
    fi
fi

# Verifica √≠ndice de documenta√ß√£o
if [ -f "docs/DOCUMENTATION_INDEX.md" ]; then
    # Conta quantos links h√° no √≠ndice
    LINKS_COUNT=$(grep -c "\[.*\](" "docs/DOCUMENTATION_INDEX.md" 2>/dev/null || echo "0")
    if [ "$LINKS_COUNT" -gt 5 ]; then
        print_success "√çndice de documenta√ß√£o tem $LINKS_COUNT links"
    else
        print_warning "√çndice de documenta√ß√£o tem poucos links ($LINKS_COUNT)"
        ((WARNINGS++))
    fi
fi

echo ""
echo "==========================================  "
echo "üèÅ RELAT√ìRIO FINAL DE VALIDA√á√ÉO"
echo "=========================================="

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    print_success "Estrutura de documenta√ß√£o perfeita! ‚ú®"
    echo "Todos os arquivos essenciais est√£o presentes e bem organizados."
    exit 0
elif [ $ERRORS -eq 0 ]; then
    print_warning "Estrutura de documenta√ß√£o boa com $WARNINGS avisos"
    echo "Arquivos essenciais presentes, mas alguns opcionais est√£o ausentes."
    exit 0
else
    print_error "Estrutura de documenta√ß√£o tem problemas!"
    echo "Erros: $ERRORS | Avisos: $WARNINGS"
    echo ""
    echo "Corrija os erros antes de continuar:"
    echo "- Arquivos essenciais ausentes precisam ser criados"
    echo "- Verifique se a estrutura de pastas est√° correta"
    echo "- Ensure que os arquivos t√™m conte√∫do adequado"
    exit 1
fi
